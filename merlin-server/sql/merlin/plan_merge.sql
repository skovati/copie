create type activity_change_type as enum ('none', 'add', 'delete','modify');
create type conflict_resolution as enum ('none','supplying', 'receiving');

/*
Stores all of the activities associated with a merge
Gets added to by:
    - taking the diff of the supplier and receiver and uploading all non-conflicting changes with relevant tag
      -  (conflicting ids go into the conflicting activity tables)
    - uploading a resolved conflict with either the tag 'delete' or 'modify' depending on context
      -  (none and add cannot cause conflict)
      -  (a new version of the conflict resolution will replace the version currently in the table
    - deletes are placed as the full activity, but are 'marked to delete' essentially
-- Because of this, to get the full list of activities involved in an in-progress merge requires querying here and conflicting_activities
 */
-- TODO: Consider removing some of the defaults from this table? Decision depends on if we can have an activity
--        that doesn't have a field in this area somehow.
create table merge_staging_area(
    merge_request_id integer
      references merge_request
      on update cascade
      on delete cascade,
    activity_id integer generated by default as identity,

    name text,
    tags text[] default '{}',
    source_scheduling_goal_id integer,
    created_at timestamptz not null,
    start_offset interval not null,
    type text not null,
    arguments merlin_argument_set not null,
    metadata merlin_activity_directive_metadata_set default '{}'::jsonb,

    anchor_id integer default null,
    anchored_to_start boolean default true not null,

    change_type activity_change_type not null,

    primary key (activity_id, merge_request_id)
);

comment on table merge_staging_area is e''
  'The staged version of an activity directive in an in-progress merge to be committed onto the plan receiving changes.';
comment on column merge_staging_area.merge_request_id is e''
  'The merge request associated with this staged activity.\n'
  'Half of the natural key associated with this table, alongside activity_id.';
comment on column merge_staging_area.activity_id is e''
  'The identifier of the staged activity directive.\n'
  'Half of the natural key associated with this table, alongside merge_request_id.';
comment on column merge_staging_area.name is e''
  'The name of this activity directive to be committed.';
comment on column merge_staging_area.tags is e''
  'The tags of this activity directive to be committed.';
comment on column merge_staging_area.source_scheduling_goal_id is e''
  'The id of the scheduling goal that generated this activity directive to be committed.';
comment on column merge_staging_area.created_at is e''
  'The creation time of this activity directive to be committed.';
comment on column merge_staging_area.start_offset is e''
  'The start offset of this activity directive to be committed.';
comment on column merge_staging_area.type is e''
  'The type of this activity directive to be committed.';
comment on column merge_staging_area.arguments is e''
  'The set of arguments to this activity directive to be committed.';
comment on column merge_staging_area.metadata is e''
  'The metadata of this activity directive to be committed.';
comment on column merge_staging_area.anchor_id is e''
  'The identifier of the anchor of this activity directive to be committed.';
comment on column merge_staging_area.anchored_to_start is e''
  'The status of whether this activity directive is anchored to its anchor''s start time to be committed.';
comment on column merge_staging_area.change_type is e''
  'The type of change that has occurred between the version of this activity in the supplying plan'
  ' and the version in the receiving plan, from the perspective of the receiving plan.\n'
  'Can be either "none", "add", "delete", or "modify".';

-- Stores a list of all activities in conflict in a merge
create table conflicting_activities(
      merge_request_id integer
        references merge_request
        on update cascade
        on delete cascade,
      activity_id integer,
      primary key (activity_id, merge_request_id),

      change_type_supplying activity_change_type
        not null
        check ( change_type_supplying = 'delete' or change_type_supplying = 'modify' ),
      change_type_receiving activity_change_type
        not null
        check ( change_type_receiving = 'delete' or change_type_receiving = 'modify' ),
      resolution conflict_resolution default 'none'
);

comment on table conflicting_activities is e''
  'An activity directive in an in-progress merge '
  'where the supplying, receiving, and merge base versions of this activity directive are all different.';
comment on column conflicting_activities.merge_request_id is e''
  'The merge request associated with this conflicting activity.\n'
  'Half of the natural key associated with this table, alongside activity_id.';
comment on column conflicting_activities.activity_id is e''
  'The activity directive that is in conflict.\n'
  'Half of the natural key associated with this table, alongside merge_request_id.';
comment on column conflicting_activities.change_type_supplying is e''
  'The type of change that has occurred between the merge base and the version of this activity'
  ' in the supplying plan.\n'
  'Must be either "delete" or "modify".';
comment on column conflicting_activities.change_type_receiving is e''
  'The type of change that has occurred between the merge base and the version of this activity'
  ' in the receiving plan.\n'
  'Must be either "delete" or "modify".';
comment on column conflicting_activities.resolution is e''
  'The version of this activity to be used when committing this merge.\n'
  'Can be either "none", "receiving" or "supplying".';

create function get_merge_base(plan_id_receiving_changes integer, snapshot_id_supplying_changes integer)
  returns integer
  language plpgsql as $$
  declare
    result integer;
begin
  select * from
    (
      select get_snapshot_history_from_plan(plan_id_receiving_changes) as ids
      intersect
      select get_snapshot_history(snapshot_id_supplying_changes) as ids
    )
    as ids
    order by ids desc
    limit 1
    into result;
  return result;
end
$$;

/*
  Plans are merged following a three way merge (https://en.wikipedia.org/wiki/Merge_(version_control)#Three-way_merge)
  algorithm. After beginning a merge, the activities will be placed into one of two areas:
  a Merge Staging Area (MSA) and a Conflicting Activities table (CA).

  Where they will go is decided as follows:

  Difference btwn Source and MB | Difference btwn Target and MB | Outcome
  ------------------------------+-------------------------------+--------------------
            Add                 |             --                | Into MSA as Add
            --                  |             Add               | Into MSA as None
            None                |             None              | Into MSA as None
            Modify              |             None              | Into MSA as Modify
            Delete              |             None              | Into MSA as Delete
            None                |             Modify            | Into MSA as None
            Modify (Equal)      |             Modify (Equal)    | Into MSA as None
            Modify (Inequal)    |             Modify (Inequal)  | Into CA
            Delete              |             Modify            | Into CA
            None                |             Delete            | Dropped
            Modify              |             Delete            | Into CA
            Delete              |             Delete            | Dropped
 */
create procedure begin_merge(_merge_request_id integer, review_username text)
  language plpgsql as $$
  declare
    validate_id integer;
    validate_status merge_request_status;
    validate_non_no_op_status activity_change_type;
    snapshot_id_supplying integer;
    plan_id_receiving integer;
    merge_base_id integer;
begin
  -- validate id and status
  select id, status
    from merge_request
    where _merge_request_id = id
    into validate_id, validate_status;

  if validate_id is null then
    raise exception 'Request ID % is not present in merge_request table.', _merge_request_id;
  end if;

  if validate_status != 'pending' then
    raise exception 'Cannot begin request. Merge request % is not in pending state.', _merge_request_id;
  end if;

  -- select from merge-request the snapshot_sc (s_sc) and plan_rc (p_rc) ids
  select plan_id_receiving_changes, snapshot_id_supplying_changes
    from merge_request
    where id = _merge_request_id
    into plan_id_receiving, snapshot_id_supplying;

  -- ensure the plan receiving changes isn't locked
  if (select is_locked from plan where plan.id=plan_id_receiving) then
    raise exception 'Cannot begin merge request. Plan to receive changes is locked.';
  end if;

  -- lock plan_rc
  update plan
    set is_locked = true
    where plan.id = plan_id_receiving;

  -- get merge base (mb)
  select get_merge_base(plan_id_receiving, snapshot_id_supplying)
    into merge_base_id;

  -- update the status to "in progress"
  update merge_request
    set status = 'in-progress',
    merge_base_snapshot_id = merge_base_id,
    reviewer_username = review_username
    where id = _merge_request_id;


  -- perform diff between mb and s_sc (s_diff)
    -- delete is B minus A on key
    -- add is A minus B on key
    -- A intersect B is no op
    -- A minus B on everything except everything currently in the table is modify
  create temp table supplying_diff(
    activity_id integer,
    change_type activity_change_type not null
  );

  insert into supplying_diff (activity_id, change_type)
  select activity_id, 'delete'
  from(
    select id as activity_id
    from plan_snapshot_activities
      where snapshot_id = merge_base_id
    except
    select id as activity_id
    from plan_snapshot_activities
      where snapshot_id = snapshot_id_supplying) a;

  insert into supplying_diff (activity_id, change_type)
  select activity_id, 'add'
  from(
    select id as activity_id
    from plan_snapshot_activities
      where snapshot_id = snapshot_id_supplying
    except
    select id as activity_id
    from plan_snapshot_activities
      where snapshot_id = merge_base_id) a;

  insert into supplying_diff (activity_id, change_type)
    select activity_id, 'none'
      from(
        select id as activity_id, name, tags, source_scheduling_goal_id, created_at, last_modified_at,
            start_offset, type, arguments, last_modified_arguments_at, metadata, anchor_id, anchored_to_start
        from plan_snapshot_activities
        where snapshot_id = merge_base_id
    intersect
      select id as activity_id, name, tags, source_scheduling_goal_id, created_at, last_modified_at,
            start_offset, type, arguments, last_modified_arguments_at, metadata, anchor_id, anchored_to_start
        from plan_snapshot_activities
        where snapshot_id = snapshot_id_supplying) a;

  insert into supplying_diff (activity_id, change_type)
    select activity_id, 'modify'
    from(
      select id as activity_id from plan_snapshot_activities
        where snapshot_id = merge_base_id or snapshot_id = snapshot_id_supplying
      except
      select activity_id from supplying_diff) a;

  -- perform diff between mb and p_rc (r_diff)
  create temp table receiving_diff(
     activity_id integer,
     change_type activity_change_type not null
  );

  insert into receiving_diff (activity_id, change_type)
  select activity_id, 'delete'
  from(
        select id as activity_id
        from plan_snapshot_activities
        where snapshot_id = merge_base_id
        except
        select id as activity_id
        from activity_directive
        where plan_id = plan_id_receiving) a;

  insert into receiving_diff (activity_id, change_type)
  select activity_id, 'add'
  from(
        select id as activity_id
        from activity_directive
        where plan_id = plan_id_receiving
        except
        select id as activity_id
        from plan_snapshot_activities
        where snapshot_id = merge_base_id) a;

  insert into receiving_diff (activity_id, change_type)
  select activity_id, 'none'
  from(
        select id as activity_id, name, tags, source_scheduling_goal_id, created_at, last_modified_at,
               start_offset, type, arguments, last_modified_arguments_at, metadata, anchor_id, anchored_to_start
        from plan_snapshot_activities
        where snapshot_id = merge_base_id
        intersect
        select id as activity_id, name, tags, source_scheduling_goal_id, created_at, last_modified_at,
               start_offset, type, arguments, last_modified_arguments_at, metadata, anchor_id, anchored_to_start
        from activity_directive
        where plan_id = plan_id_receiving) a;

  insert into receiving_diff (activity_id, change_type)
  select activity_id, 'modify'
  from (
        (select id as activity_id
         from plan_snapshot_activities
         where snapshot_id = merge_base_id
         union
         select id as activity_id
         from activity_directive
         where plan_id = plan_id_receiving)
        except
        select activity_id
        from receiving_diff) a;


  -- perform diff between s_diff and r_diff
      -- upload the non-conflicts into merge_staging_area
      -- upload conflict into conflicting_activities
  create temp table diff_diff(
    activity_id integer,
    change_type_supplying activity_change_type not null,
    change_type_receiving activity_change_type not null
  );

  -- this is going to require us to do the "none" operation again on the remaining modifies
  -- but otherwise we can just dump the 'adds' and 'none' into the merge staging area table

  -- 'delete' against a 'delete' does not enter the merge staging area table
  -- receiving 'delete' against supplying 'none' does not enter the merge staging area table

  insert into merge_staging_area (
    merge_request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
    start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type
         )
  -- 'adds' can go directly into the merge staging area table
  select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type
    from supplying_diff as  s_diff
    join plan_snapshot_activities psa
      on s_diff.activity_id = psa.id
    where snapshot_id = snapshot_id_supplying and change_type = 'add'
  union
  -- an 'add' between the receiving plan and merge base is actually a 'none'
  select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'none'::activity_change_type
    from receiving_diff as r_diff
    join activity_directive ad
      on r_diff.activity_id = ad.id
    where plan_id = plan_id_receiving and change_type = 'add';

  -- put the rest in diff_diff
  insert into diff_diff (activity_id, change_type_supplying, change_type_receiving)
  select activity_id, supplying_diff.change_type as change_type_supplying, receiving_diff.change_type as change_type_receiving
    from receiving_diff
    join supplying_diff using (activity_id)
  where receiving_diff.change_type != 'add' or supplying_diff.change_type != 'add';

  -- ...except for that which is not recorded
  delete from diff_diff
    where (change_type_receiving = 'delete' and  change_type_supplying = 'delete')
       or (change_type_receiving = 'delete' and change_type_supplying = 'none');

  insert into merge_staging_area (
    merge_request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
    start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type
  )
  -- receiving 'none' and 'modify' against 'none' in the supplying side go into the merge staging area as 'none'
  select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'none'
    from diff_diff
    join activity_directive
      on activity_id=id
    where plan_id = plan_id_receiving
      and change_type_supplying = 'none'
      and (change_type_receiving = 'modify' or change_type_receiving = 'none')
  union
  -- supplying 'modify' against receiving 'none' go into the merge staging area as 'modify'
  select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type_supplying
    from diff_diff
    join plan_snapshot_activities p
      on diff_diff.activity_id = p.id
    where snapshot_id = snapshot_id_supplying
      and (change_type_receiving = 'none' and diff_diff.change_type_supplying = 'modify')
  union
  -- supplying 'delete' against receiving 'none' go into the merge staging area as 'delete'
    select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type_supplying
    from diff_diff
    join activity_directive p
      on diff_diff.activity_id = p.id
    where plan_id = plan_id_receiving
      and (change_type_receiving = 'none' and diff_diff.change_type_supplying = 'delete')
  union
  -- 'modify' against a 'modify' must be checked for equality first.
  select _merge_request_id, activity_id, name, tags,  source_scheduling_goal_id, created_at,
         start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'none'
  from (
    select activity_id, name, tags,  source_scheduling_goal_id, created_at,
           start_offset, type, arguments, metadata, anchor_id, anchored_to_start
      from plan_snapshot_activities psa
      join diff_diff dd
        on dd.activity_id = psa.id
      where psa.snapshot_id = snapshot_id_supplying
        and (dd.change_type_receiving = 'modify' and dd.change_type_supplying = 'modify')
    intersect
    select activity_id, name, tags,  source_scheduling_goal_id, created_at,
           start_offset, type, arguments, metadata, anchor_id, anchored_to_start
      from diff_diff dd
      join activity_directive ad
        on dd.activity_id = ad.id
      where ad.plan_id = plan_id_receiving
        and (dd.change_type_supplying = 'modify' and dd.change_type_receiving = 'modify')
  ) a;

  -- 'modify' against 'delete' and inequal 'modify' against 'modify' goes into conflict table (aka everything left in diff_diff)
  insert into conflicting_activities (merge_request_id, activity_id, change_type_supplying, change_type_receiving)
  select begin_merge._merge_request_id, activity_id, change_type_supplying, change_type_receiving
  from (select begin_merge._merge_request_id, activity_id
        from diff_diff
        except
        select msa.merge_request_id, activity_id
        from merge_staging_area msa) a
  join diff_diff using (activity_id);

  -- Fail if there are no differences between the snapshot and the plan getting merged
  validate_non_no_op_status := null;
  select change_type_receiving
  from conflicting_activities
  where merge_request_id = _merge_request_id
  limit 1
  into validate_non_no_op_status;

  if validate_non_no_op_status is null then
    select change_type
    from merge_staging_area msa
    where merge_request_id = _merge_request_id
    and msa.change_type != 'none'
    limit 1
    into validate_non_no_op_status;

    if validate_non_no_op_status is null then
      raise exception 'Cannot begin merge. The contents of the two plans are identical.';
    end if;
  end if;


  -- clean up
  drop table supplying_diff;
  drop table receiving_diff;
  drop table diff_diff;
end
$$;

/*
  Commit merge takes all of the contents of the staging area and all of the resolved conflicts
  and applies the changes to the plan getting merged into.
 */
create procedure commit_merge(request_id integer)
  language plpgsql as $$
  declare
    validate_noConflicts integer;
    plan_id_R integer;
    snapshot_id_S integer;
begin
  if(select id from merge_request where id = request_id) is null then
    raise exception 'Invalid merge request id %.', request_id;
  end if;

  -- Stop if this merge is not 'in-progress'
  if (select status from merge_request where id = request_id) != 'in-progress' then
    raise exception 'Cannot commit a merge request that is not in-progress.';
  end if;

  -- Stop if any conflicts have not been resolved
  select * from conflicting_activities
  where merge_request_id = request_id and resolution = 'none'
  limit 1
  into validate_noConflicts;

  if(validate_noConflicts is not null) then
    raise exception 'There are unresolved conflicts in merge request %. Cannot commit merge.', request_id;
  end if;

  select plan_id_receiving_changes from merge_request mr where mr.id = request_id into plan_id_R;
  select snapshot_id_supplying_changes from merge_request mr where mr.id = request_id into snapshot_id_S;

  insert into merge_staging_area(
    merge_request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
    start_offset, type, arguments, metadata, anchor_id, anchored_to_start, change_type)
    -- gather delete data from the opposite tables
    select  commit_merge.request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
            start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'delete'::activity_change_type
      from  conflicting_activities ca
      join  activity_directive ad
        on  ca.activity_id = ad.id
      where ca.resolution = 'supplying'
        and ca.merge_request_id = commit_merge.request_id
        and plan_id = plan_id_R
        and ca.change_type_supplying = 'delete'
    union
    select  commit_merge.request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
          start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'delete'::activity_change_type
      from  conflicting_activities ca
      join  plan_snapshot_activities psa
        on  ca.activity_id = psa.id
      where ca.resolution = 'receiving'
        and ca.merge_request_id = commit_merge.request_id
        and snapshot_id = snapshot_id_S
        and ca.change_type_receiving = 'delete'
    union
    select  commit_merge.request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
            start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'none'::activity_change_type
      from  conflicting_activities ca
      join  activity_directive ad
        on  ca.activity_id = ad.id
      where ca.resolution = 'receiving'
        and ca.merge_request_id = commit_merge.request_id
        and plan_id = plan_id_R
        and ca.change_type_receiving = 'modify'
    union
    select  commit_merge.request_id, activity_id, name, tags, source_scheduling_goal_id, created_at,
          start_offset, type, arguments, metadata, anchor_id, anchored_to_start, 'modify'::activity_change_type
      from  conflicting_activities ca
      join  plan_snapshot_activities psa
        on  ca.activity_id = psa.id
      where ca.resolution = 'supplying'
        and ca.merge_request_id = commit_merge.request_id
        and snapshot_id = snapshot_id_S
        and ca.change_type_supplying = 'modify';

  -- Unlock so that updates can be written
  update plan
  set is_locked = false
  where id = plan_id_R;

  -- Update the plan's activities to match merge-staging-area's activities
  -- Add
  insert into activity_directive(
                id, plan_id, name, tags, source_scheduling_goal_id, created_at,
                start_offset, type, arguments, metadata, anchor_id, anchored_to_start )
  select  activity_id, plan_id_R, name, tags, source_scheduling_goal_id, created_at,
            start_offset, type, arguments, metadata, anchor_id, anchored_to_start
   from merge_staging_area
  where merge_staging_area.merge_request_id = commit_merge.request_id
    and change_type = 'add';

  -- Modify
  insert into activity_directive(
    id, plan_id, "name", tags, source_scheduling_goal_id, created_at,
    start_offset, "type", arguments, metadata, anchor_id, anchored_to_start )
  select  activity_id, plan_id_R, "name", tags, source_scheduling_goal_id, created_at,
          start_offset, "type", arguments, metadata, anchor_id, anchored_to_start
  from merge_staging_area
  where merge_staging_area.merge_request_id = commit_merge.request_id
    and change_type = 'modify'
  on conflict (id, plan_id)
  do update
  set name = excluded.name,
      tags = excluded.tags,
      source_scheduling_goal_id = excluded.source_scheduling_goal_id,
      created_at = excluded.created_at,
      start_offset = excluded.start_offset,
      type = excluded.type,
      arguments = excluded.arguments,
      metadata = excluded.metadata,
      anchor_id = excluded.anchor_id,
      anchored_to_start = excluded.anchored_to_start;

  -- Presets
  insert into preset_to_directive(preset_id, activity_id, plan_id)
  select pts.preset_id, pts.activity_id, plan_id_R
  from merge_staging_area msa, preset_to_snapshot_directive pts
  where msa.activity_id = pts.activity_id
    and msa.change_type = 'add'
     or msa.change_type = 'modify'
  on conflict (activity_id, plan_id)
    do update
    set preset_id = excluded.preset_id;

  -- Delete
  delete from activity_directive ad
  using merge_staging_area msa
  where ad.id = msa.activity_id
    and ad.plan_id = plan_id_R
    and msa.merge_request_id = commit_merge.request_id
    and msa.change_type = 'delete';

  -- Clean up
  delete from conflicting_activities where merge_request_id = request_id;
  delete from merge_staging_area where merge_staging_area.merge_request_id = commit_merge.request_id;

  update merge_request
  set status = 'accepted'
  where id = request_id;

  -- Attach snapshot history
  insert into plan_latest_snapshot(plan_id, snapshot_id)
  select plan_id_receiving_changes, snapshot_id_supplying_changes
  from merge_request
  where id = request_id;
end
$$;

/*
  - Discard everything that was in the staging area
  - Then, unlock the to-be-edited plan
  - Then, change the merge request's status to 'rejected'
*/
create procedure deny_merge(request_id integer)
  language plpgsql as $$
  begin
    if(select id from merge_request where id = request_id) is null then
      raise exception 'Invalid merge request id %.', request_id;
    end if;

    if (select status from merge_request where id = request_id) != 'in-progress' then
      raise exception 'Cannot reject merge not in progress.';
    end if;

    delete from conflicting_activities where merge_request_id = request_id;
    delete from merge_staging_area where merge_staging_area.merge_request_id = deny_merge.request_id;

    update merge_request
    set status = 'rejected'
    where merge_request.id = request_id;

    update plan
    set is_locked = false
    where plan.id = (select plan_id_receiving_changes from merge_request where id = request_id);
  end
  $$;

/*
  - Discard everything that was in the staging area
  - Then, unlock the to-be-edited plan
  - Then, change the merge request's status to 'pending'
*/
create procedure cancel_merge(request_id integer)
  language plpgsql as $$
  declare
    verify_status merge_request_status;
begin
    if(select id from merge_request where id = request_id) is null then
      raise exception 'Invalid merge request id %.', request_id;
    end if;

    select status from merge_request where id = request_id into verify_status;
    if not (verify_status = 'in-progress' or verify_status = 'pending') then
      raise exception 'Cannot cancel merge.';
    end if;

    delete from conflicting_activities where merge_request_id = request_id;
    delete from merge_staging_area where merge_staging_area.merge_request_id = cancel_merge.request_id;

    update merge_request
    set status = 'pending'
    where merge_request.id = request_id;

    update plan
    set is_locked = false
    where plan.id = (select plan_id_receiving_changes from merge_request where id = request_id);
end
$$;
