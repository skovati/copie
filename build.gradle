plugins {
  id 'com.github.ben-manes.versions' version '0.43.0'
}

task archiveDeployment(type: Tar) {
  destinationDirectory = file('.')
  archiveFileName = 'deployment.tar'
  into 'deployment'
  from 'deployment'
}

// Set publishing version property globally for this project
configure(subprojects) {
    setProperty('publishing.version', {
      if (findProperty("version.isRelease").toBoolean()) {
        return "${findProperty("version.number")}"
      } else {
        def hash = 'git rev-parse --short HEAD'.execute().text.trim()
        return "${findProperty("version.number")}-SNAPSHOT-$hash"
      }
    }())
}

// Add `distributeSql` task to all subprojects with `sql/` child directory
configure(subprojects.findAll { it.projectDir.toPath().resolve('sql').toFile().exists() }) { sp ->

  task distributeSql(type: Copy) {
    into "$rootDir/deployment/postgres-init-db/sql"
    from fileTree(dir: "${sp.projectDir}/sql", include: '**/*.sql')
  }

  // Remove distributed SQL as part of `clean` task
  task undoDistributeSql(type: Delete) {
    doLast { // Explicity do last to avoid running during configuration step
      file("${sp.projectDir}/sql").list().each {
        delete "$rootDir/deployment/postgres-init-db/sql/$it"
      }
    }
  }

  // For all Java subprojects
  sp.plugins.withId('java') {
    // Distribute SQL as part of resource processing
    processResources.dependsOn distributeSql
    // Remove distributed SQL as part of `clean` tasks
    clean.dependsOn undoDistributeSql
  }

  // For all Node subprojects
  sp.plugins.withId('com.github.node-gradle.node') {
    // For all subprojects without resource processing already defined
    if (!tasks.findByName('processResources')) {
      // Distribute SQL as part of resource processing
      tasks.create('processResources')
      tasks.findAll { it.name == 'processResources' }.each { it.dependsOn distributeSql }
      // 'clean' is not visible here, make sure to call `undoDistributeSql` as part of each subproject's `clean` task
    }
  }

  // Distribute SQL prior to creating deployment archive
  archiveDeployment.dependsOn distributeSql
}

subprojects {
  apply plugin: 'com.github.ben-manes.versions'

  repositories {
    // Search the local filesystem before attempting remote repositories
    flatDir { dirs "$rootDir/third-party" }
    mavenCentral()
  }

  group = 'gov.nasa.jpl.aerie'

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    options.encoding = 'UTF-8'
  }

  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}
