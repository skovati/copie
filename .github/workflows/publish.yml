name: Publish

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  compile:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "19"
      - uses: actions/cache@v3
        with:
          path: |
            ./build
            ./**/build
            ./sequencing-server
          key: ${{ runner.os }}-gradle-${{ github.sha }}
      - uses: gradle/wrapper-validation-action@v1
      - name: assemble project
        run: ./gradlew assemble --parallel --no-daemon

  build:
    needs: compile
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      packages: write
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ./build
            ./**/build
            ./sequencing-server
          key: ${{ runner.os }}-gradle-${{ github.sha }}

      - name: Login to the Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract metadata (tags, labels) for aerie-merlin Docker image
        id: aerieMerlin
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/skovati/aerie-merlin

      - name: Push aerie-merlin Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./merlin-server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.aerieMerlin.outputs.tags }}
          labels: ${{ steps.aerieMerlin.outputs.labels }}

      - name: Scan aerie-merlin Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/skovati/aerie-merlin:main
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL'
          timeout: 10m0s

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
